
pipeline {
    environment{
        AWS_ACCESS_KEY_ID=credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY=credentials('AWS_SECRET_ACCESS_KEY')
        region= "ap-south-1"
    }
    agent {
        label 'worker'
    }
    tools {
        maven "maven"
        // docker "docker"
    }
    stages {
        stage("clone") {
            steps {
checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/dhairyashild/springboot-java-poject-small-devopsshack-copy.git']])       
                    }
        }
        stage("build") {
            steps {
                dir ('/home/ubuntu/jenkins/workspace/springboot-project-pipeline-code/'){
                sh 'mvn clean install'
                }
                    
                }
        }
        
        stage("sonar") {
            steps {
              sh '''mvn clean verify sonar:sonar \
  -Dsonar.projectKey=springboot-project-pipeline-code \
  -Dsonar.host.url=http://52.66.197.219:9000 \
  -Dsonar.login=sqp_301a5ec1a74ece60154cffdba037544a0ebc0671'''    
                }
                    
                }


  

stage ('ecr push'){
    steps{
        sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/d8y1d3c0'
        
         sh 'docker build -t spring-app .'
        
         sh 'docker tag spring-app:latest public.ecr.aws/d8y1d3c0/spring-app:${BUILD_NUMBER}'
         
         sh 'docker push public.ecr.aws/d8y1d3c0/spring-app:${BUILD_NUMBER}'
    }
}

stage("terraform clone repo") {
            steps {
               checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/dhairyashild/springboot-project-pipeline-code.git']])
                }
                    
                }

      
       
                
        }
}


    
